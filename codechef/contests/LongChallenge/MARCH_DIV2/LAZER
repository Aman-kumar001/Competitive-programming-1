// partial correct, remaining TLE
#include<bits/stdc++.h>
#define ll long long int 
using namespace std;

struct Point 
{ 
	ll x; 
	ll y; 
}; 

// Given three colinear points p, q, r, the function checks if 
// point q lies on line segment 'pr' 
bool onSegment(Point p, Point q, Point r) 
{ 
	if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) && 
		q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y)) 
	return true; 

	return false; 
}

ll orientation(Point p, Point q, Point r) 
{ 
	ll val = (q.y - p.y) * (r.x - q.x) - 
			(q.x - p.x) * (r.y - q.y); 

	if (val == 0) return 0; // colinear 

	return (val > 0)? 1: 2; // clock or counterclock wise 
} 

bool doIntersect(Point p1, Point q1, Point p2, Point q2) 
{ 
	ll o1 = orientation(p1, q1, p2); 
	ll o2 = orientation(p1, q1, q2); 
	ll o3 = orientation(p2, q2, p1); 
	ll o4 = orientation(p2, q2, q1); 

    if(p1.x==q2.x && p1.y==q2.y){
        return false;
    }
    if(q1.x==p2.x && q1.y == p2.y){
        return false;
    }

	// General case 
	if (o1 != o2 && o3 != o4) 
		return true; 

	if (o1 == 0 && onSegment(p1, p2, q1)) return true; 

	if (o2 == 0 && onSegment(p1, q2, q1)) return true; 

	if (o3 == 0 && onSegment(p2, p1, q2)) return true; 

	if (o4 == 0 && onSegment(p2, q1, q2)) return true; 

	return false; // Doesn't fall in any of the above cases 
} 


int main(){
    int t; cin >> t;
    while(t--){
        ll n,q;
        cin >> n >>q;
        ll yi[n];
        ll xi[n];

        for(ll i=0 ; i<n ; i++){
            cin >> yi[i];
            xi[i]=i+1;
        }    
        ll count;
        while(q--){
            count=0;
            ll x1,x2,y;
            cin >> x1 >> x2 >> y;
            struct Point p2 = {x1,y}, q2 = {x2,y};

            for(ll i=0 ; i<n-1 ; i++){
                struct Point p1 = {xi[i] , yi[i]}, q1 = {xi[i+1] , yi[i+1]}; 
                    if(doIntersect(p1, q1, p2, q2))
                        count++;
            }
            cout << count << endl;
        }
    }
    
}
